#############################
LISKOV SUBSTITUTION PRINCIPLE
#############################

In OOP every sub class should be able to make the parent class work flawlessly. If the subclass performs execptional actions, you probably need to change the parent class or add another parent with different base components.

Square could be a subclass of rectangle as every square is a rectangle, though not all rectangles are squares.

Example: rectangle and square. The square subclass is not exactly compatible with the rectangle class functions. 

The solution would be to have a shape class that is more flexible. Both the recatangle and shape extend from the shape base class.


COMPOSITION

Since you cannot extend multiple classes into subclasses you probably best work with compostion, i.e adding extra functionality, instead of inheriting base classes. Look it up: composition in classes.
